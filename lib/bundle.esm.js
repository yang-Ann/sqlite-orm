class e{tableName;curOrmStore=e.getDefaultCurOrmStore();constructor(e){this.tableName=e}static getDefaultCurOrmStore(){return{insert:void 0,delect:void 0,update:void 0,select:void 0,count:void 0,groupBy:void 0,where:void 0,and:void 0,or:void 0,limit:void 0}}getTableName(){return this.tableName}setTableName(e){return this.tableName=e,this}clearCurOrmStore(){return this.curOrmStore=e.getDefaultCurOrmStore(),this}clear(){return this.clearCurOrmStore()}setOperStore(e,t){return this.curOrmStore={...this.curOrmStore,select:void 0,delect:void 0,update:void 0,count:void 0,[e]:t},this.curOrmStore.curOper=e,this}inser(e){const t=this.buildInsertValues([e]);return`INSERT or REPLACE INTO "${this.tableName}" ${t}`}insers(e,t=999){if(0===e.length)return"";const r=Object.keys(e[0]),s=Math.floor(t/r.length);return this.dataSlice({datas:e,onceMaxDataLength:s}).map((e=>{const t=this.buildInsertValues(e);return`INSERT or REPLACE INTO "${this.tableName}" ${t}`}))}delect(){return this.setOperStore("delect",!0)}update(e){return this.setOperStore("update",e)}select(e="*"){return this.setOperStore("select",e)}count(e){return this.setOperStore("count",e.startsWith("count(")?`count(${e})`:e)}groupBy(e){return this.curOrmStore.groupBy=e,this}orderBy(e,t){return this.curOrmStore.orderBy=[e,t],this}buildWhereItem(e,t,r){const s=["IN","IS NOT","NOT","like"].includes(t)?` ${t} `:t;let i="";if(r)if("string"==typeof r)i=`"${r}"`;else if("IN"===t&&Array.isArray(r)){i=`(${r.map((e=>"string"==typeof e?`"${e}"`:e)).join(",")})`}else i=r;else"boolean"==typeof r&&(i=r?1:0);return`${e}${s}${i}`}where(e,t,r){this.curOrmStore.isSetWhere=!0;const s=this.buildWhereItem(e,t,r);return this.curOrmStore.where?this.curOrmStore.where.unshift(s):this.curOrmStore.where=[s],this}and(e,t,r){const s={key:e,connect:t,value:r};this.curOrmStore.and?this.curOrmStore.and.push(s):this.curOrmStore.and=[s];const i=this.buildWhereItem(e,t,r);return this.curOrmStore.where?"("===this.curOrmStore.where[this.curOrmStore.where.length-1]?this.curOrmStore.where.push(i):this.curOrmStore.where.push("AND",i):this.curOrmStore.where=["AND",i],this}or(e,t,r){const s={key:e,connect:t,value:r};this.curOrmStore.or?this.curOrmStore.or.push(s):this.curOrmStore.or=[s];const i=this.buildWhereItem(e,t,r);return this.curOrmStore.where?"("===this.curOrmStore.where[this.curOrmStore.where.length-1]?this.curOrmStore.where.push(i):this.curOrmStore.where.push("OR",i):this.curOrmStore.where=["OR",i],this}buildWhereArrayItem(e,t,r,s){return r.length&&(this.curOrmStore.isSetWhere=!0),this.curOrmStore.where?this.curOrmStore.where.push(s,"("):this.curOrmStore.where=["("],r.forEach((r=>{"AND"===s?this.and(e,t,r):"OR"===s&&this.or(e,t,r)})),this.curOrmStore.where.push(")"),this}whereArray(e,t,r,s){return r.length?this.buildWhereArrayItem(e,t,r,s):console.warn("空数组 WHERE 条件"),this}orArray(e,t,r){return r.length?this.buildWhereArrayItem(e,t,r,"OR"):console.warn("空数组 WHERE 条件"),this}andArray(e,t,r){return r.length?this.buildWhereArrayItem(e,t,r,"AND"):console.warn("空数组 WHERE 条件"),this}limit(e,t){return this.curOrmStore.limit=[e,t],this}getSqlRaw(){return this.buildRawSql()}buildWhere(){const e=this.curOrmStore.where;return e&&!this.curOrmStore.isSetWhere&&e.shift(),e&&e.length?`WHERE ${e.join(" ")}`:""}buildGroupBy(){const e=this.curOrmStore.groupBy;return e?`GROUP BY ${e}`:""}buildOrderBy(){const e=this.curOrmStore.orderBy;return e&&e.length?`ORDER BY ${e[1]} ${e[0]}`:""}buildLimit(){const e=this.curOrmStore.limit;return e&&e.length?`LIMIT ${e[0]},${e[1]}`:""}buildInsertValues(e){if(!e||0===e.length)return"";const t=Object.keys(e[0]),r=`(${t.join(", ")}) VALUES`,s=[];e.forEach((e=>{const r=[];t.forEach((t=>{for(const s in e)if(Object.prototype.hasOwnProperty.call(e,s)&&t===s){const t=e[s];t&&"string"==typeof t?r.push(`"${t}"`):"boolean"==typeof t?r.push(t?1:0):r.push(t)}})),s.push(r)}));return`${r} ${s.map((e=>`(${e.join(", ")})`)).join(", ")}`}buildRawSql(){const e=this.curOrmStore.curOper;if(!e)return"";let t="",r=[];t=`${{delect:"DELETE FROM",update:"UPDATE",select:`SELECT ${this.curOrmStore.select} FROM`,count:`SELECT count(${this.curOrmStore.count}) FROM`}[e]} "${this.tableName}"`;const s=`${this.buildWhere()} ${this.buildGroupBy()} ${this.buildOrderBy()} ${this.buildLimit()}`;if("delect"===e)t=`${t} ${s}`;else if("update"===e){const e=this.curOrmStore.update;if(e){const i=Object.keys(e),h=Object.values(e);t=`${t} SET ${i.map(((e,t)=>`${e}="${r[t]}"`)).join(", ")} ${s}`,r=h}}else"select"!==e&&"count"!==e||(t=`${t} ${s}`);return this.clearCurOrmStore(),t.replace(/\s+/g," ")}addColumn(e,t,r=this.tableName){return`ALTER TABLE "${r}" ADD ${e} ${t};`}dataSlice(e){const t=e.onceMaxDataLength,r=JSON.parse(JSON.stringify(e.datas)),s=Math.ceil(r.length/t),i=[];for(let e=0;e<s;e++){const s=r.slice(e*t,(e+1)*t);i.push(s)}return i}buildUpdateByWhen(e){if(0===e.datas.length)return console.warn("数组数据为空"),[];const t=[],r=this.dataSlice({datas:e.datas,onceMaxDataLength:e.onceMaxUpdateDataLength||999});for(let s=0;s<r.length;s++){console.log("更新数据: ",r[s]);const i=this.$buildUpdateByWhen({datas:r[s],onceMaxUpdateDataLength:e.onceMaxUpdateDataLength,fieldOpts:e.fieldOpts,getExtraUpdateWhen:e.getExtraUpdateWhen,getExtraWhere:e.getExtraWhere});t.push(i)}return t}$buildUpdateByWhen(e){const t=[];e.fieldOpts.forEach((r=>{const{setField:s,getWhenField:i,getWhenValue:h,getThenValue:o}=r,a=`${s} = CASE ${e.datas.map((e=>`WHEN ${i(e)}="${h(e)}" THEN "${o(e)}"`)).join(" ")} END`;t.push(a)}));const r="SET "+t.join(", "),s=e.getExtraUpdateWhen?", "+e.getExtraUpdateWhen(e.datas):"",i=e.getExtraWhere?`WHERE ${e.getExtraWhere(e.datas)}`:"";return`UPDATE "${this.tableName}" ${r} ${s} ${i}`.trim()}setVersion(e){return`PRAGMA user_version = ${e}`}tableInfo(t=this.tableName){return new e("sqlite_master").select().where("type","=","table").and("name","=",t).getSqlRaw()}findById(e,t="id"){return this.clear().select().where(t,"=",e).getSqlRaw()}selectAll(e=this.tableName){return this.clear().setTableName(e).select().getSqlRaw()}deleteById(e,t="id"){return this.clear().delect().where(t,"=",e).getSqlRaw()}deleteAll(e=this.tableName){return this.clear().setTableName(e).delect().where("1","=",1).getSqlRaw()}deleteTable(e=this.tableName){return`DROP TABLE IF EXISTS "${e}"`}buildCreate(e){const t=[];e.forEach((e=>{const{field:r,type:s,isKey:i,isNotNull:h}=e,o=`${r} ${s}${i?" PRIMARY KEY AUTOINCREMENT":""}${h?" NOT NULL":""}`;t.push(o)}));return`CREATE TABLE IF NOT EXISTS "${this.tableName}" (${t.join(", ")});`}}const t="0.0.1";export{e as SqliteOrm,t as VERSION,e as default};
